#ifndef __ERRORWARNINGMESSAGE_H__
#define __ERRORWARNINGMESSAGE_H__

#include <intchar.h>
#include <sstream>


enum MSGTYPE {MSGERROR, MSGWARNING, MSGMESSAGE};


namespace lev
{


class CLevMessage
{
	protected:
		std::string messagetime;	///< texto da mensagem
		std::string messagetext;	///< texto da mensagem
		std::string messageoperation;	///< qual opera��o gerou o erro
		int			messagecode;	///< codigo associado
		MSGTYPE		messagetype;	///< tipo da mensagem (MSGERROR, MSGWARNING)

	public:

		CLevMessage(){};// construtor padr�o
		CLevMessage(int codigo, std::string quem, std::string texto, MSGTYPE tipo)
		{
			SetMessageData(codigo, quem, texto, tipo);
		}

		~CLevMessage(){};

		inline void SetMessageData(int codigo, std::string quem, std::string texto, MSGTYPE tipo)
		{
		    //==================
		    // Get current time
		    //==================
		    time_t rawtime;
		    struct tm * timeinfo;
		    char buffer[80];
		    time (&rawtime);
		    timeinfo = localtime(&rawtime);
		    strftime(buffer,80,"%d-%m-%Y %I:%M:%S",timeinfo);

			messagetext = texto;
			messagetype = tipo;
			messagecode = codigo;
			messageoperation = quem;
			messagetime = buffer;
		}

		inline const char* GetMessageText(void)
		{
			return messagetext.c_str();
		}

		inline int GetMessageCode(void)
		{
			return messagecode;
		}

		inline MSGTYPE GetMessageType(void)
		{
			return messagetype;
		}

		inline const char* GetMessageOperation(void)
		{
			return messageoperation.c_str();
		}

		//Retorna mensagem completa com codigo de erro, quem gerou e qual o erro
		inline const char* GetCompleteMessage(void)
		{
			CIntChar msgcode(messagecode);
			std::string msgcomplete;


			msgcomplete = "Time: " + messagetime  + "\n"
					    +  msgcode.stdStringValue() + "\n"
						+ "Operation: " + messageoperation.c_str() + "\n"
						+ messagetext.c_str();

			return msgcomplete.c_str();
		}

		inline std::string GetCompleteMessageStdString(void)
		{
			CIntChar msgcode(messagecode);
			std::string msgcomplete;

			msgcomplete = "Time: " + messagetime  + "\n"
						+  msgcode.stdStringValue() + "\n"
						+ "Operation: " + messageoperation.c_str() + "\n"
						+ messagetext.c_str();

			return msgcomplete;
		}

		CLevMessage & operator = (const CLevMessage &p)		///< Opera��o de atribui��o
		{
			messagetext = p.messagetext;
			messagetype = p.messagetype;
			messagecode = p.messagecode;
			messageoperation = p.messageoperation;
			messagetime = p.messagetime;

			return *this;
		}

		friend std::ostream & operator << (std::ostream & out, CLevMessage & msgdata)
		{
			out << std::endl << msgdata.messagetime;

			if(msgdata.messagetype == MSGERROR)
				out << std::endl << "ERROR ";
			else
				if(msgdata.messagetype == MSGWARNING)
					out << std::endl << "WARNING ";
				else
					out << std::endl << "MESSAGE ";


			out << msgdata.messagecode;
			out << std::endl << "generated by: " << msgdata.messageoperation;
			out << std::endl << "message: " << msgdata.messagetext;

			out << std::endl;

		  return out;
		}
};


}
#endif
